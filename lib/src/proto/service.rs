// This file is generated by rust-protobuf 2.23.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_23_0;

#[derive(PartialEq,Clone,Default)]
pub struct BlockID {
    // message fields
    pub height: u64,
    pub hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockID {
    fn default() -> &'a BlockID {
        <BlockID as ::protobuf::Message>::default_instance()
    }
}

impl BlockID {
    pub fn new() -> BlockID {
        ::std::default::Default::default()
    }

    // uint64 height = 1;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }

    // bytes hash = 2;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for BlockID {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.height != 0 {
            os.write_uint64(1, self.height)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockID {
        BlockID::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "height",
                |m: &BlockID| { &m.height },
                |m: &mut BlockID| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &BlockID| { &m.hash },
                |m: &mut BlockID| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockID>(
                "BlockID",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockID {
        static instance: ::protobuf::rt::LazyV2<BlockID> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockID::new)
    }
}

impl ::protobuf::Clear for BlockID {
    fn clear(&mut self) {
        self.height = 0;
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockID {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockID {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BlockRange {
    // message fields
    pub start: ::protobuf::SingularPtrField<BlockID>,
    pub end: ::protobuf::SingularPtrField<BlockID>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BlockRange {
    fn default() -> &'a BlockRange {
        <BlockRange as ::protobuf::Message>::default_instance()
    }
}

impl BlockRange {
    pub fn new() -> BlockRange {
        ::std::default::Default::default()
    }

    // .cash.z.wallet.sdk.rpc.BlockID start = 1;


    pub fn get_start(&self) -> &BlockID {
        self.start.as_ref().unwrap_or_else(|| <BlockID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start(&mut self) {
        self.start.clear();
    }

    pub fn has_start(&self) -> bool {
        self.start.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start(&mut self, v: BlockID) {
        self.start = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start(&mut self) -> &mut BlockID {
        if self.start.is_none() {
            self.start.set_default();
        }
        self.start.as_mut().unwrap()
    }

    // Take field
    pub fn take_start(&mut self) -> BlockID {
        self.start.take().unwrap_or_else(|| BlockID::new())
    }

    // .cash.z.wallet.sdk.rpc.BlockID end = 2;


    pub fn get_end(&self) -> &BlockID {
        self.end.as_ref().unwrap_or_else(|| <BlockID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_end(&mut self) {
        self.end.clear();
    }

    pub fn has_end(&self) -> bool {
        self.end.is_some()
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: BlockID) {
        self.end = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_end(&mut self) -> &mut BlockID {
        if self.end.is_none() {
            self.end.set_default();
        }
        self.end.as_mut().unwrap()
    }

    // Take field
    pub fn take_end(&mut self) -> BlockID {
        self.end.take().unwrap_or_else(|| BlockID::new())
    }
}

impl ::protobuf::Message for BlockRange {
    fn is_initialized(&self) -> bool {
        for v in &self.start {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.end {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.end)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.start.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.end.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.start.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.end.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BlockRange {
        BlockRange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockID>>(
                "start",
                |m: &BlockRange| { &m.start },
                |m: &mut BlockRange| { &mut m.start },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockID>>(
                "end",
                |m: &BlockRange| { &m.end },
                |m: &mut BlockRange| { &mut m.end },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BlockRange>(
                "BlockRange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BlockRange {
        static instance: ::protobuf::rt::LazyV2<BlockRange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BlockRange::new)
    }
}

impl ::protobuf::Clear for BlockRange {
    fn clear(&mut self) {
        self.start.clear();
        self.end.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BlockRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockRange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TxFilter {
    // message fields
    pub block: ::protobuf::SingularPtrField<BlockID>,
    pub index: u64,
    pub hash: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TxFilter {
    fn default() -> &'a TxFilter {
        <TxFilter as ::protobuf::Message>::default_instance()
    }
}

impl TxFilter {
    pub fn new() -> TxFilter {
        ::std::default::Default::default()
    }

    // .cash.z.wallet.sdk.rpc.BlockID block = 1;


    pub fn get_block(&self) -> &BlockID {
        self.block.as_ref().unwrap_or_else(|| <BlockID as ::protobuf::Message>::default_instance())
    }
    pub fn clear_block(&mut self) {
        self.block.clear();
    }

    pub fn has_block(&self) -> bool {
        self.block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_block(&mut self, v: BlockID) {
        self.block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block(&mut self) -> &mut BlockID {
        if self.block.is_none() {
            self.block.set_default();
        }
        self.block.as_mut().unwrap()
    }

    // Take field
    pub fn take_block(&mut self) -> BlockID {
        self.block.take().unwrap_or_else(|| BlockID::new())
    }

    // uint64 index = 2;


    pub fn get_index(&self) -> u64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    // bytes hash = 3;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for TxFilter {
    fn is_initialized(&self) -> bool {
        for v in &self.block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.block)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.block.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.index != 0 {
            os.write_uint64(2, self.index)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(3, &self.hash)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TxFilter {
        TxFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockID>>(
                "block",
                |m: &TxFilter| { &m.block },
                |m: &mut TxFilter| { &mut m.block },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "index",
                |m: &TxFilter| { &m.index },
                |m: &mut TxFilter| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &TxFilter| { &m.hash },
                |m: &mut TxFilter| { &mut m.hash },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TxFilter>(
                "TxFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TxFilter {
        static instance: ::protobuf::rt::LazyV2<TxFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TxFilter::new)
    }
}

impl ::protobuf::Clear for TxFilter {
    fn clear(&mut self) {
        self.block.clear();
        self.index = 0;
        self.hash.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TxFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TxFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RawTransaction {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    pub height: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RawTransaction {
    fn default() -> &'a RawTransaction {
        <RawTransaction as ::protobuf::Message>::default_instance()
    }
}

impl RawTransaction {
    pub fn new() -> RawTransaction {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // uint64 height = 2;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }
}

impl ::protobuf::Message for RawTransaction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if self.height != 0 {
            os.write_uint64(2, self.height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RawTransaction {
        RawTransaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &RawTransaction| { &m.data },
                |m: &mut RawTransaction| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "height",
                |m: &RawTransaction| { &m.height },
                |m: &mut RawTransaction| { &mut m.height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RawTransaction>(
                "RawTransaction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RawTransaction {
        static instance: ::protobuf::rt::LazyV2<RawTransaction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RawTransaction::new)
    }
}

impl ::protobuf::Clear for RawTransaction {
    fn clear(&mut self) {
        self.data.clear();
        self.height = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RawTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RawTransaction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendResponse {
    // message fields
    pub errorCode: i32,
    pub errorMessage: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendResponse {
    fn default() -> &'a SendResponse {
        <SendResponse as ::protobuf::Message>::default_instance()
    }
}

impl SendResponse {
    pub fn new() -> SendResponse {
        ::std::default::Default::default()
    }

    // int32 errorCode = 1;


    pub fn get_errorCode(&self) -> i32 {
        self.errorCode
    }
    pub fn clear_errorCode(&mut self) {
        self.errorCode = 0;
    }

    // Param is passed by value, moved
    pub fn set_errorCode(&mut self, v: i32) {
        self.errorCode = v;
    }

    // string errorMessage = 2;


    pub fn get_errorMessage(&self) -> &str {
        &self.errorMessage
    }
    pub fn clear_errorMessage(&mut self) {
        self.errorMessage.clear();
    }

    // Param is passed by value, moved
    pub fn set_errorMessage(&mut self, v: ::std::string::String) {
        self.errorMessage = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_errorMessage(&mut self) -> &mut ::std::string::String {
        &mut self.errorMessage
    }

    // Take field
    pub fn take_errorMessage(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.errorMessage, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SendResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.errorCode = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.errorMessage)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.errorCode != 0 {
            my_size += ::protobuf::rt::value_size(1, self.errorCode, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.errorMessage.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.errorMessage);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.errorCode != 0 {
            os.write_int32(1, self.errorCode)?;
        }
        if !self.errorMessage.is_empty() {
            os.write_string(2, &self.errorMessage)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendResponse {
        SendResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "errorCode",
                |m: &SendResponse| { &m.errorCode },
                |m: &mut SendResponse| { &mut m.errorCode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "errorMessage",
                |m: &SendResponse| { &m.errorMessage },
                |m: &mut SendResponse| { &mut m.errorMessage },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SendResponse>(
                "SendResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SendResponse {
        static instance: ::protobuf::rt::LazyV2<SendResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SendResponse::new)
    }
}

impl ::protobuf::Clear for SendResponse {
    fn clear(&mut self) {
        self.errorCode = 0;
        self.errorMessage.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChainSpec {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChainSpec {
    fn default() -> &'a ChainSpec {
        <ChainSpec as ::protobuf::Message>::default_instance()
    }
}

impl ChainSpec {
    pub fn new() -> ChainSpec {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ChainSpec {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChainSpec {
        ChainSpec::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChainSpec>(
                "ChainSpec",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChainSpec {
        static instance: ::protobuf::rt::LazyV2<ChainSpec> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChainSpec::new)
    }
}

impl ::protobuf::Clear for ChainSpec {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChainSpec {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainSpec {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Empty {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Empty {
    fn default() -> &'a Empty {
        <Empty as ::protobuf::Message>::default_instance()
    }
}

impl Empty {
    pub fn new() -> Empty {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Empty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Empty {
        Empty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Empty>(
                "Empty",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Empty {
        static instance: ::protobuf::rt::LazyV2<Empty> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Empty::new)
    }
}

impl ::protobuf::Clear for Empty {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Empty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Empty {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LightdInfo {
    // message fields
    pub version: ::std::string::String,
    pub vendor: ::std::string::String,
    pub taddrSupport: bool,
    pub chainName: ::std::string::String,
    pub saplingActivationHeight: u64,
    pub consensusBranchId: ::std::string::String,
    pub blockHeight: u64,
    pub gitCommit: ::std::string::String,
    pub branch: ::std::string::String,
    pub buildDate: ::std::string::String,
    pub buildUser: ::std::string::String,
    pub estimatedHeight: u64,
    pub zcashdBuild: ::std::string::String,
    pub zcashdSubversion: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LightdInfo {
    fn default() -> &'a LightdInfo {
        <LightdInfo as ::protobuf::Message>::default_instance()
    }
}

impl LightdInfo {
    pub fn new() -> LightdInfo {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string vendor = 2;


    pub fn get_vendor(&self) -> &str {
        &self.vendor
    }
    pub fn clear_vendor(&mut self) {
        self.vendor.clear();
    }

    // Param is passed by value, moved
    pub fn set_vendor(&mut self, v: ::std::string::String) {
        self.vendor = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vendor(&mut self) -> &mut ::std::string::String {
        &mut self.vendor
    }

    // Take field
    pub fn take_vendor(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vendor, ::std::string::String::new())
    }

    // bool taddrSupport = 3;


    pub fn get_taddrSupport(&self) -> bool {
        self.taddrSupport
    }
    pub fn clear_taddrSupport(&mut self) {
        self.taddrSupport = false;
    }

    // Param is passed by value, moved
    pub fn set_taddrSupport(&mut self, v: bool) {
        self.taddrSupport = v;
    }

    // string chainName = 4;


    pub fn get_chainName(&self) -> &str {
        &self.chainName
    }
    pub fn clear_chainName(&mut self) {
        self.chainName.clear();
    }

    // Param is passed by value, moved
    pub fn set_chainName(&mut self, v: ::std::string::String) {
        self.chainName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chainName(&mut self) -> &mut ::std::string::String {
        &mut self.chainName
    }

    // Take field
    pub fn take_chainName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chainName, ::std::string::String::new())
    }

    // uint64 saplingActivationHeight = 5;


    pub fn get_saplingActivationHeight(&self) -> u64 {
        self.saplingActivationHeight
    }
    pub fn clear_saplingActivationHeight(&mut self) {
        self.saplingActivationHeight = 0;
    }

    // Param is passed by value, moved
    pub fn set_saplingActivationHeight(&mut self, v: u64) {
        self.saplingActivationHeight = v;
    }

    // string consensusBranchId = 6;


    pub fn get_consensusBranchId(&self) -> &str {
        &self.consensusBranchId
    }
    pub fn clear_consensusBranchId(&mut self) {
        self.consensusBranchId.clear();
    }

    // Param is passed by value, moved
    pub fn set_consensusBranchId(&mut self, v: ::std::string::String) {
        self.consensusBranchId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consensusBranchId(&mut self) -> &mut ::std::string::String {
        &mut self.consensusBranchId
    }

    // Take field
    pub fn take_consensusBranchId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.consensusBranchId, ::std::string::String::new())
    }

    // uint64 blockHeight = 7;


    pub fn get_blockHeight(&self) -> u64 {
        self.blockHeight
    }
    pub fn clear_blockHeight(&mut self) {
        self.blockHeight = 0;
    }

    // Param is passed by value, moved
    pub fn set_blockHeight(&mut self, v: u64) {
        self.blockHeight = v;
    }

    // string gitCommit = 8;


    pub fn get_gitCommit(&self) -> &str {
        &self.gitCommit
    }
    pub fn clear_gitCommit(&mut self) {
        self.gitCommit.clear();
    }

    // Param is passed by value, moved
    pub fn set_gitCommit(&mut self, v: ::std::string::String) {
        self.gitCommit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gitCommit(&mut self) -> &mut ::std::string::String {
        &mut self.gitCommit
    }

    // Take field
    pub fn take_gitCommit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gitCommit, ::std::string::String::new())
    }

    // string branch = 9;


    pub fn get_branch(&self) -> &str {
        &self.branch
    }
    pub fn clear_branch(&mut self) {
        self.branch.clear();
    }

    // Param is passed by value, moved
    pub fn set_branch(&mut self, v: ::std::string::String) {
        self.branch = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_branch(&mut self) -> &mut ::std::string::String {
        &mut self.branch
    }

    // Take field
    pub fn take_branch(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.branch, ::std::string::String::new())
    }

    // string buildDate = 10;


    pub fn get_buildDate(&self) -> &str {
        &self.buildDate
    }
    pub fn clear_buildDate(&mut self) {
        self.buildDate.clear();
    }

    // Param is passed by value, moved
    pub fn set_buildDate(&mut self, v: ::std::string::String) {
        self.buildDate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buildDate(&mut self) -> &mut ::std::string::String {
        &mut self.buildDate
    }

    // Take field
    pub fn take_buildDate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buildDate, ::std::string::String::new())
    }

    // string buildUser = 11;


    pub fn get_buildUser(&self) -> &str {
        &self.buildUser
    }
    pub fn clear_buildUser(&mut self) {
        self.buildUser.clear();
    }

    // Param is passed by value, moved
    pub fn set_buildUser(&mut self, v: ::std::string::String) {
        self.buildUser = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buildUser(&mut self) -> &mut ::std::string::String {
        &mut self.buildUser
    }

    // Take field
    pub fn take_buildUser(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.buildUser, ::std::string::String::new())
    }

    // uint64 estimatedHeight = 12;


    pub fn get_estimatedHeight(&self) -> u64 {
        self.estimatedHeight
    }
    pub fn clear_estimatedHeight(&mut self) {
        self.estimatedHeight = 0;
    }

    // Param is passed by value, moved
    pub fn set_estimatedHeight(&mut self, v: u64) {
        self.estimatedHeight = v;
    }

    // string zcashdBuild = 13;


    pub fn get_zcashdBuild(&self) -> &str {
        &self.zcashdBuild
    }
    pub fn clear_zcashdBuild(&mut self) {
        self.zcashdBuild.clear();
    }

    // Param is passed by value, moved
    pub fn set_zcashdBuild(&mut self, v: ::std::string::String) {
        self.zcashdBuild = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_zcashdBuild(&mut self) -> &mut ::std::string::String {
        &mut self.zcashdBuild
    }

    // Take field
    pub fn take_zcashdBuild(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.zcashdBuild, ::std::string::String::new())
    }

    // string zcashdSubversion = 14;


    pub fn get_zcashdSubversion(&self) -> &str {
        &self.zcashdSubversion
    }
    pub fn clear_zcashdSubversion(&mut self) {
        self.zcashdSubversion.clear();
    }

    // Param is passed by value, moved
    pub fn set_zcashdSubversion(&mut self, v: ::std::string::String) {
        self.zcashdSubversion = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_zcashdSubversion(&mut self) -> &mut ::std::string::String {
        &mut self.zcashdSubversion
    }

    // Take field
    pub fn take_zcashdSubversion(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.zcashdSubversion, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LightdInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vendor)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.taddrSupport = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chainName)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.saplingActivationHeight = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.consensusBranchId)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.blockHeight = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gitCommit)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.branch)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buildDate)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.buildUser)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.estimatedHeight = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.zcashdBuild)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.zcashdSubversion)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if !self.vendor.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.vendor);
        }
        if self.taddrSupport != false {
            my_size += 2;
        }
        if !self.chainName.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.chainName);
        }
        if self.saplingActivationHeight != 0 {
            my_size += ::protobuf::rt::value_size(5, self.saplingActivationHeight, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.consensusBranchId.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.consensusBranchId);
        }
        if self.blockHeight != 0 {
            my_size += ::protobuf::rt::value_size(7, self.blockHeight, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gitCommit.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.gitCommit);
        }
        if !self.branch.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.branch);
        }
        if !self.buildDate.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.buildDate);
        }
        if !self.buildUser.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.buildUser);
        }
        if self.estimatedHeight != 0 {
            my_size += ::protobuf::rt::value_size(12, self.estimatedHeight, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.zcashdBuild.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.zcashdBuild);
        }
        if !self.zcashdSubversion.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.zcashdSubversion);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if !self.vendor.is_empty() {
            os.write_string(2, &self.vendor)?;
        }
        if self.taddrSupport != false {
            os.write_bool(3, self.taddrSupport)?;
        }
        if !self.chainName.is_empty() {
            os.write_string(4, &self.chainName)?;
        }
        if self.saplingActivationHeight != 0 {
            os.write_uint64(5, self.saplingActivationHeight)?;
        }
        if !self.consensusBranchId.is_empty() {
            os.write_string(6, &self.consensusBranchId)?;
        }
        if self.blockHeight != 0 {
            os.write_uint64(7, self.blockHeight)?;
        }
        if !self.gitCommit.is_empty() {
            os.write_string(8, &self.gitCommit)?;
        }
        if !self.branch.is_empty() {
            os.write_string(9, &self.branch)?;
        }
        if !self.buildDate.is_empty() {
            os.write_string(10, &self.buildDate)?;
        }
        if !self.buildUser.is_empty() {
            os.write_string(11, &self.buildUser)?;
        }
        if self.estimatedHeight != 0 {
            os.write_uint64(12, self.estimatedHeight)?;
        }
        if !self.zcashdBuild.is_empty() {
            os.write_string(13, &self.zcashdBuild)?;
        }
        if !self.zcashdSubversion.is_empty() {
            os.write_string(14, &self.zcashdSubversion)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LightdInfo {
        LightdInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &LightdInfo| { &m.version },
                |m: &mut LightdInfo| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vendor",
                |m: &LightdInfo| { &m.vendor },
                |m: &mut LightdInfo| { &mut m.vendor },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "taddrSupport",
                |m: &LightdInfo| { &m.taddrSupport },
                |m: &mut LightdInfo| { &mut m.taddrSupport },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chainName",
                |m: &LightdInfo| { &m.chainName },
                |m: &mut LightdInfo| { &mut m.chainName },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "saplingActivationHeight",
                |m: &LightdInfo| { &m.saplingActivationHeight },
                |m: &mut LightdInfo| { &mut m.saplingActivationHeight },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "consensusBranchId",
                |m: &LightdInfo| { &m.consensusBranchId },
                |m: &mut LightdInfo| { &mut m.consensusBranchId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "blockHeight",
                |m: &LightdInfo| { &m.blockHeight },
                |m: &mut LightdInfo| { &mut m.blockHeight },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gitCommit",
                |m: &LightdInfo| { &m.gitCommit },
                |m: &mut LightdInfo| { &mut m.gitCommit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "branch",
                |m: &LightdInfo| { &m.branch },
                |m: &mut LightdInfo| { &mut m.branch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buildDate",
                |m: &LightdInfo| { &m.buildDate },
                |m: &mut LightdInfo| { &mut m.buildDate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "buildUser",
                |m: &LightdInfo| { &m.buildUser },
                |m: &mut LightdInfo| { &mut m.buildUser },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "estimatedHeight",
                |m: &LightdInfo| { &m.estimatedHeight },
                |m: &mut LightdInfo| { &mut m.estimatedHeight },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "zcashdBuild",
                |m: &LightdInfo| { &m.zcashdBuild },
                |m: &mut LightdInfo| { &mut m.zcashdBuild },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "zcashdSubversion",
                |m: &LightdInfo| { &m.zcashdSubversion },
                |m: &mut LightdInfo| { &mut m.zcashdSubversion },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LightdInfo>(
                "LightdInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LightdInfo {
        static instance: ::protobuf::rt::LazyV2<LightdInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LightdInfo::new)
    }
}

impl ::protobuf::Clear for LightdInfo {
    fn clear(&mut self) {
        self.version.clear();
        self.vendor.clear();
        self.taddrSupport = false;
        self.chainName.clear();
        self.saplingActivationHeight = 0;
        self.consensusBranchId.clear();
        self.blockHeight = 0;
        self.gitCommit.clear();
        self.branch.clear();
        self.buildDate.clear();
        self.buildUser.clear();
        self.estimatedHeight = 0;
        self.zcashdBuild.clear();
        self.zcashdSubversion.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LightdInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LightdInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransparentAddressBlockFilter {
    // message fields
    pub address: ::std::string::String,
    pub range: ::protobuf::SingularPtrField<BlockRange>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransparentAddressBlockFilter {
    fn default() -> &'a TransparentAddressBlockFilter {
        <TransparentAddressBlockFilter as ::protobuf::Message>::default_instance()
    }
}

impl TransparentAddressBlockFilter {
    pub fn new() -> TransparentAddressBlockFilter {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // .cash.z.wallet.sdk.rpc.BlockRange range = 2;


    pub fn get_range(&self) -> &BlockRange {
        self.range.as_ref().unwrap_or_else(|| <BlockRange as ::protobuf::Message>::default_instance())
    }
    pub fn clear_range(&mut self) {
        self.range.clear();
    }

    pub fn has_range(&self) -> bool {
        self.range.is_some()
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: BlockRange) {
        self.range = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_range(&mut self) -> &mut BlockRange {
        if self.range.is_none() {
            self.range.set_default();
        }
        self.range.as_mut().unwrap()
    }

    // Take field
    pub fn take_range(&mut self) -> BlockRange {
        self.range.take().unwrap_or_else(|| BlockRange::new())
    }
}

impl ::protobuf::Message for TransparentAddressBlockFilter {
    fn is_initialized(&self) -> bool {
        for v in &self.range {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.range)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if let Some(ref v) = self.range.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if let Some(ref v) = self.range.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransparentAddressBlockFilter {
        TransparentAddressBlockFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &TransparentAddressBlockFilter| { &m.address },
                |m: &mut TransparentAddressBlockFilter| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<BlockRange>>(
                "range",
                |m: &TransparentAddressBlockFilter| { &m.range },
                |m: &mut TransparentAddressBlockFilter| { &mut m.range },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransparentAddressBlockFilter>(
                "TransparentAddressBlockFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransparentAddressBlockFilter {
        static instance: ::protobuf::rt::LazyV2<TransparentAddressBlockFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransparentAddressBlockFilter::new)
    }
}

impl ::protobuf::Clear for TransparentAddressBlockFilter {
    fn clear(&mut self) {
        self.address.clear();
        self.range.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransparentAddressBlockFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransparentAddressBlockFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Duration {
    // message fields
    pub intervalUs: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Duration {
    fn default() -> &'a Duration {
        <Duration as ::protobuf::Message>::default_instance()
    }
}

impl Duration {
    pub fn new() -> Duration {
        ::std::default::Default::default()
    }

    // int64 intervalUs = 1;


    pub fn get_intervalUs(&self) -> i64 {
        self.intervalUs
    }
    pub fn clear_intervalUs(&mut self) {
        self.intervalUs = 0;
    }

    // Param is passed by value, moved
    pub fn set_intervalUs(&mut self, v: i64) {
        self.intervalUs = v;
    }
}

impl ::protobuf::Message for Duration {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.intervalUs = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.intervalUs != 0 {
            my_size += ::protobuf::rt::value_size(1, self.intervalUs, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.intervalUs != 0 {
            os.write_int64(1, self.intervalUs)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Duration {
        Duration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "intervalUs",
                |m: &Duration| { &m.intervalUs },
                |m: &mut Duration| { &mut m.intervalUs },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Duration>(
                "Duration",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Duration {
        static instance: ::protobuf::rt::LazyV2<Duration> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Duration::new)
    }
}

impl ::protobuf::Clear for Duration {
    fn clear(&mut self) {
        self.intervalUs = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Duration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Duration {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PingResponse {
    // message fields
    pub entry: i64,
    pub exit: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PingResponse {
    fn default() -> &'a PingResponse {
        <PingResponse as ::protobuf::Message>::default_instance()
    }
}

impl PingResponse {
    pub fn new() -> PingResponse {
        ::std::default::Default::default()
    }

    // int64 entry = 1;


    pub fn get_entry(&self) -> i64 {
        self.entry
    }
    pub fn clear_entry(&mut self) {
        self.entry = 0;
    }

    // Param is passed by value, moved
    pub fn set_entry(&mut self, v: i64) {
        self.entry = v;
    }

    // int64 exit = 2;


    pub fn get_exit(&self) -> i64 {
        self.exit
    }
    pub fn clear_exit(&mut self) {
        self.exit = 0;
    }

    // Param is passed by value, moved
    pub fn set_exit(&mut self, v: i64) {
        self.exit = v;
    }
}

impl ::protobuf::Message for PingResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.entry = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.exit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.entry != 0 {
            my_size += ::protobuf::rt::value_size(1, self.entry, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.exit != 0 {
            my_size += ::protobuf::rt::value_size(2, self.exit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.entry != 0 {
            os.write_int64(1, self.entry)?;
        }
        if self.exit != 0 {
            os.write_int64(2, self.exit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PingResponse {
        PingResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "entry",
                |m: &PingResponse| { &m.entry },
                |m: &mut PingResponse| { &mut m.entry },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "exit",
                |m: &PingResponse| { &m.exit },
                |m: &mut PingResponse| { &mut m.exit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PingResponse>(
                "PingResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PingResponse {
        static instance: ::protobuf::rt::LazyV2<PingResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PingResponse::new)
    }
}

impl ::protobuf::Clear for PingResponse {
    fn clear(&mut self) {
        self.entry = 0;
        self.exit = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PingResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Address {
    // message fields
    pub address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Address {
    fn default() -> &'a Address {
        <Address as ::protobuf::Message>::default_instance()
    }
}

impl Address {
    pub fn new() -> Address {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Address {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Address {
        Address::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &Address| { &m.address },
                |m: &mut Address| { &mut m.address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Address>(
                "Address",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Address {
        static instance: ::protobuf::rt::LazyV2<Address> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Address::new)
    }
}

impl ::protobuf::Clear for Address {
    fn clear(&mut self) {
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Address {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Address {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AddressList {
    // message fields
    pub addresses: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AddressList {
    fn default() -> &'a AddressList {
        <AddressList as ::protobuf::Message>::default_instance()
    }
}

impl AddressList {
    pub fn new() -> AddressList {
        ::std::default::Default::default()
    }

    // repeated string addresses = 1;


    pub fn get_addresses(&self) -> &[::std::string::String] {
        &self.addresses
    }
    pub fn clear_addresses(&mut self) {
        self.addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_addresses(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addresses(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.addresses
    }

    // Take field
    pub fn take_addresses(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.addresses, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AddressList {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.addresses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.addresses {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.addresses {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AddressList {
        AddressList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "addresses",
                |m: &AddressList| { &m.addresses },
                |m: &mut AddressList| { &mut m.addresses },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AddressList>(
                "AddressList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AddressList {
        static instance: ::protobuf::rt::LazyV2<AddressList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AddressList::new)
    }
}

impl ::protobuf::Clear for AddressList {
    fn clear(&mut self) {
        self.addresses.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AddressList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AddressList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Balance {
    // message fields
    pub valueZat: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Balance {
    fn default() -> &'a Balance {
        <Balance as ::protobuf::Message>::default_instance()
    }
}

impl Balance {
    pub fn new() -> Balance {
        ::std::default::Default::default()
    }

    // int64 valueZat = 1;


    pub fn get_valueZat(&self) -> i64 {
        self.valueZat
    }
    pub fn clear_valueZat(&mut self) {
        self.valueZat = 0;
    }

    // Param is passed by value, moved
    pub fn set_valueZat(&mut self, v: i64) {
        self.valueZat = v;
    }
}

impl ::protobuf::Message for Balance {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.valueZat = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.valueZat != 0 {
            my_size += ::protobuf::rt::value_size(1, self.valueZat, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.valueZat != 0 {
            os.write_int64(1, self.valueZat)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Balance {
        Balance::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "valueZat",
                |m: &Balance| { &m.valueZat },
                |m: &mut Balance| { &mut m.valueZat },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Balance>(
                "Balance",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Balance {
        static instance: ::protobuf::rt::LazyV2<Balance> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Balance::new)
    }
}

impl ::protobuf::Clear for Balance {
    fn clear(&mut self) {
        self.valueZat = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Balance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Balance {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Exclude {
    // message fields
    pub txid: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Exclude {
    fn default() -> &'a Exclude {
        <Exclude as ::protobuf::Message>::default_instance()
    }
}

impl Exclude {
    pub fn new() -> Exclude {
        ::std::default::Default::default()
    }

    // repeated bytes txid = 1;


    pub fn get_txid(&self) -> &[::std::vec::Vec<u8>] {
        &self.txid
    }
    pub fn clear_txid(&mut self) {
        self.txid.clear();
    }

    // Param is passed by value, moved
    pub fn set_txid(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.txid = v;
    }

    // Mutable pointer to the field.
    pub fn mut_txid(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.txid
    }

    // Take field
    pub fn take_txid(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.txid, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Exclude {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.txid)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.txid {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.txid {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Exclude {
        Exclude::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "txid",
                |m: &Exclude| { &m.txid },
                |m: &mut Exclude| { &mut m.txid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Exclude>(
                "Exclude",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Exclude {
        static instance: ::protobuf::rt::LazyV2<Exclude> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Exclude::new)
    }
}

impl ::protobuf::Clear for Exclude {
    fn clear(&mut self) {
        self.txid.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Exclude {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Exclude {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TreeState {
    // message fields
    pub network: ::std::string::String,
    pub height: u64,
    pub hash: ::std::string::String,
    pub time: u32,
    pub tree: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TreeState {
    fn default() -> &'a TreeState {
        <TreeState as ::protobuf::Message>::default_instance()
    }
}

impl TreeState {
    pub fn new() -> TreeState {
        ::std::default::Default::default()
    }

    // string network = 1;


    pub fn get_network(&self) -> &str {
        &self.network
    }
    pub fn clear_network(&mut self) {
        self.network.clear();
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: ::std::string::String) {
        self.network = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network(&mut self) -> &mut ::std::string::String {
        &mut self.network
    }

    // Take field
    pub fn take_network(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.network, ::std::string::String::new())
    }

    // uint64 height = 2;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }

    // string hash = 3;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }

    // uint32 time = 4;


    pub fn get_time(&self) -> u32 {
        self.time
    }
    pub fn clear_time(&mut self) {
        self.time = 0;
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u32) {
        self.time = v;
    }

    // string tree = 5;


    pub fn get_tree(&self) -> &str {
        &self.tree
    }
    pub fn clear_tree(&mut self) {
        self.tree.clear();
    }

    // Param is passed by value, moved
    pub fn set_tree(&mut self, v: ::std::string::String) {
        self.tree = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tree(&mut self) -> &mut ::std::string::String {
        &mut self.tree
    }

    // Take field
    pub fn take_tree(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tree, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TreeState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.network)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tree)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.network.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.network);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.hash);
        }
        if self.time != 0 {
            my_size += ::protobuf::rt::value_size(4, self.time, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.tree.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.tree);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.network.is_empty() {
            os.write_string(1, &self.network)?;
        }
        if self.height != 0 {
            os.write_uint64(2, self.height)?;
        }
        if !self.hash.is_empty() {
            os.write_string(3, &self.hash)?;
        }
        if self.time != 0 {
            os.write_uint32(4, self.time)?;
        }
        if !self.tree.is_empty() {
            os.write_string(5, &self.tree)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TreeState {
        TreeState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "network",
                |m: &TreeState| { &m.network },
                |m: &mut TreeState| { &mut m.network },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "height",
                |m: &TreeState| { &m.height },
                |m: &mut TreeState| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hash",
                |m: &TreeState| { &m.hash },
                |m: &mut TreeState| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "time",
                |m: &TreeState| { &m.time },
                |m: &mut TreeState| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tree",
                |m: &TreeState| { &m.tree },
                |m: &mut TreeState| { &mut m.tree },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TreeState>(
                "TreeState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TreeState {
        static instance: ::protobuf::rt::LazyV2<TreeState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TreeState::new)
    }
}

impl ::protobuf::Clear for TreeState {
    fn clear(&mut self) {
        self.network.clear();
        self.height = 0;
        self.hash.clear();
        self.time = 0;
        self.tree.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TreeState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TreeState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetAddressUtxosArg {
    // message fields
    pub addresses: ::protobuf::RepeatedField<::std::string::String>,
    pub startHeight: u64,
    pub maxEntries: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetAddressUtxosArg {
    fn default() -> &'a GetAddressUtxosArg {
        <GetAddressUtxosArg as ::protobuf::Message>::default_instance()
    }
}

impl GetAddressUtxosArg {
    pub fn new() -> GetAddressUtxosArg {
        ::std::default::Default::default()
    }

    // repeated string addresses = 1;


    pub fn get_addresses(&self) -> &[::std::string::String] {
        &self.addresses
    }
    pub fn clear_addresses(&mut self) {
        self.addresses.clear();
    }

    // Param is passed by value, moved
    pub fn set_addresses(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.addresses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addresses(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.addresses
    }

    // Take field
    pub fn take_addresses(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.addresses, ::protobuf::RepeatedField::new())
    }

    // uint64 startHeight = 2;


    pub fn get_startHeight(&self) -> u64 {
        self.startHeight
    }
    pub fn clear_startHeight(&mut self) {
        self.startHeight = 0;
    }

    // Param is passed by value, moved
    pub fn set_startHeight(&mut self, v: u64) {
        self.startHeight = v;
    }

    // uint32 maxEntries = 3;


    pub fn get_maxEntries(&self) -> u32 {
        self.maxEntries
    }
    pub fn clear_maxEntries(&mut self) {
        self.maxEntries = 0;
    }

    // Param is passed by value, moved
    pub fn set_maxEntries(&mut self, v: u32) {
        self.maxEntries = v;
    }
}

impl ::protobuf::Message for GetAddressUtxosArg {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.addresses)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.startHeight = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.maxEntries = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.addresses {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if self.startHeight != 0 {
            my_size += ::protobuf::rt::value_size(2, self.startHeight, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.maxEntries != 0 {
            my_size += ::protobuf::rt::value_size(3, self.maxEntries, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.addresses {
            os.write_string(1, &v)?;
        };
        if self.startHeight != 0 {
            os.write_uint64(2, self.startHeight)?;
        }
        if self.maxEntries != 0 {
            os.write_uint32(3, self.maxEntries)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetAddressUtxosArg {
        GetAddressUtxosArg::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "addresses",
                |m: &GetAddressUtxosArg| { &m.addresses },
                |m: &mut GetAddressUtxosArg| { &mut m.addresses },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "startHeight",
                |m: &GetAddressUtxosArg| { &m.startHeight },
                |m: &mut GetAddressUtxosArg| { &mut m.startHeight },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "maxEntries",
                |m: &GetAddressUtxosArg| { &m.maxEntries },
                |m: &mut GetAddressUtxosArg| { &mut m.maxEntries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetAddressUtxosArg>(
                "GetAddressUtxosArg",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetAddressUtxosArg {
        static instance: ::protobuf::rt::LazyV2<GetAddressUtxosArg> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetAddressUtxosArg::new)
    }
}

impl ::protobuf::Clear for GetAddressUtxosArg {
    fn clear(&mut self) {
        self.addresses.clear();
        self.startHeight = 0;
        self.maxEntries = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetAddressUtxosArg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAddressUtxosArg {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetAddressUtxosReply {
    // message fields
    pub address: ::std::string::String,
    pub txid: ::std::vec::Vec<u8>,
    pub index: i32,
    pub script: ::std::vec::Vec<u8>,
    pub valueZat: i64,
    pub height: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetAddressUtxosReply {
    fn default() -> &'a GetAddressUtxosReply {
        <GetAddressUtxosReply as ::protobuf::Message>::default_instance()
    }
}

impl GetAddressUtxosReply {
    pub fn new() -> GetAddressUtxosReply {
        ::std::default::Default::default()
    }

    // string address = 6;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // bytes txid = 1;


    pub fn get_txid(&self) -> &[u8] {
        &self.txid
    }
    pub fn clear_txid(&mut self) {
        self.txid.clear();
    }

    // Param is passed by value, moved
    pub fn set_txid(&mut self, v: ::std::vec::Vec<u8>) {
        self.txid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txid(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.txid
    }

    // Take field
    pub fn take_txid(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.txid, ::std::vec::Vec::new())
    }

    // int32 index = 2;


    pub fn get_index(&self) -> i32 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: i32) {
        self.index = v;
    }

    // bytes script = 3;


    pub fn get_script(&self) -> &[u8] {
        &self.script
    }
    pub fn clear_script(&mut self) {
        self.script.clear();
    }

    // Param is passed by value, moved
    pub fn set_script(&mut self, v: ::std::vec::Vec<u8>) {
        self.script = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_script(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.script
    }

    // Take field
    pub fn take_script(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.script, ::std::vec::Vec::new())
    }

    // int64 valueZat = 4;


    pub fn get_valueZat(&self) -> i64 {
        self.valueZat
    }
    pub fn clear_valueZat(&mut self) {
        self.valueZat = 0;
    }

    // Param is passed by value, moved
    pub fn set_valueZat(&mut self, v: i64) {
        self.valueZat = v;
    }

    // uint64 height = 5;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }
}

impl ::protobuf::Message for GetAddressUtxosReply {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.txid)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.index = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.script)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.valueZat = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.address);
        }
        if !self.txid.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.txid);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(2, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.script.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.script);
        }
        if self.valueZat != 0 {
            my_size += ::protobuf::rt::value_size(4, self.valueZat, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(5, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(6, &self.address)?;
        }
        if !self.txid.is_empty() {
            os.write_bytes(1, &self.txid)?;
        }
        if self.index != 0 {
            os.write_int32(2, self.index)?;
        }
        if !self.script.is_empty() {
            os.write_bytes(3, &self.script)?;
        }
        if self.valueZat != 0 {
            os.write_int64(4, self.valueZat)?;
        }
        if self.height != 0 {
            os.write_uint64(5, self.height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetAddressUtxosReply {
        GetAddressUtxosReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &GetAddressUtxosReply| { &m.address },
                |m: &mut GetAddressUtxosReply| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "txid",
                |m: &GetAddressUtxosReply| { &m.txid },
                |m: &mut GetAddressUtxosReply| { &mut m.txid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "index",
                |m: &GetAddressUtxosReply| { &m.index },
                |m: &mut GetAddressUtxosReply| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "script",
                |m: &GetAddressUtxosReply| { &m.script },
                |m: &mut GetAddressUtxosReply| { &mut m.script },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "valueZat",
                |m: &GetAddressUtxosReply| { &m.valueZat },
                |m: &mut GetAddressUtxosReply| { &mut m.valueZat },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "height",
                |m: &GetAddressUtxosReply| { &m.height },
                |m: &mut GetAddressUtxosReply| { &mut m.height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetAddressUtxosReply>(
                "GetAddressUtxosReply",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetAddressUtxosReply {
        static instance: ::protobuf::rt::LazyV2<GetAddressUtxosReply> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetAddressUtxosReply::new)
    }
}

impl ::protobuf::Clear for GetAddressUtxosReply {
    fn clear(&mut self) {
        self.address.clear();
        self.txid.clear();
        self.index = 0;
        self.script.clear();
        self.valueZat = 0;
        self.height = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetAddressUtxosReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAddressUtxosReply {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetAddressUtxosReplyList {
    // message fields
    pub addressUtxos: ::protobuf::RepeatedField<GetAddressUtxosReply>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetAddressUtxosReplyList {
    fn default() -> &'a GetAddressUtxosReplyList {
        <GetAddressUtxosReplyList as ::protobuf::Message>::default_instance()
    }
}

impl GetAddressUtxosReplyList {
    pub fn new() -> GetAddressUtxosReplyList {
        ::std::default::Default::default()
    }

    // repeated .cash.z.wallet.sdk.rpc.GetAddressUtxosReply addressUtxos = 1;


    pub fn get_addressUtxos(&self) -> &[GetAddressUtxosReply] {
        &self.addressUtxos
    }
    pub fn clear_addressUtxos(&mut self) {
        self.addressUtxos.clear();
    }

    // Param is passed by value, moved
    pub fn set_addressUtxos(&mut self, v: ::protobuf::RepeatedField<GetAddressUtxosReply>) {
        self.addressUtxos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addressUtxos(&mut self) -> &mut ::protobuf::RepeatedField<GetAddressUtxosReply> {
        &mut self.addressUtxos
    }

    // Take field
    pub fn take_addressUtxos(&mut self) -> ::protobuf::RepeatedField<GetAddressUtxosReply> {
        ::std::mem::replace(&mut self.addressUtxos, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetAddressUtxosReplyList {
    fn is_initialized(&self) -> bool {
        for v in &self.addressUtxos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.addressUtxos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.addressUtxos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.addressUtxos {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetAddressUtxosReplyList {
        GetAddressUtxosReplyList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GetAddressUtxosReply>>(
                "addressUtxos",
                |m: &GetAddressUtxosReplyList| { &m.addressUtxos },
                |m: &mut GetAddressUtxosReplyList| { &mut m.addressUtxos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetAddressUtxosReplyList>(
                "GetAddressUtxosReplyList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetAddressUtxosReplyList {
        static instance: ::protobuf::rt::LazyV2<GetAddressUtxosReplyList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetAddressUtxosReplyList::new)
    }
}

impl ::protobuf::Clear for GetAddressUtxosReplyList {
    fn clear(&mut self) {
        self.addressUtxos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetAddressUtxosReplyList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetAddressUtxosReplyList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PriceRequest {
    // message fields
    pub timestamp: u64,
    pub currency: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PriceRequest {
    fn default() -> &'a PriceRequest {
        <PriceRequest as ::protobuf::Message>::default_instance()
    }
}

impl PriceRequest {
    pub fn new() -> PriceRequest {
        ::std::default::Default::default()
    }

    // uint64 timestamp = 1;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // string currency = 2;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }
}

impl ::protobuf::Message for PriceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.currency);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        if !self.currency.is_empty() {
            os.write_string(2, &self.currency)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PriceRequest {
        PriceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &PriceRequest| { &m.timestamp },
                |m: &mut PriceRequest| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &PriceRequest| { &m.currency },
                |m: &mut PriceRequest| { &mut m.currency },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PriceRequest>(
                "PriceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PriceRequest {
        static instance: ::protobuf::rt::LazyV2<PriceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PriceRequest::new)
    }
}

impl ::protobuf::Clear for PriceRequest {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.currency.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PriceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PriceResponse {
    // message fields
    pub timestamp: i64,
    pub currency: ::std::string::String,
    pub price: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PriceResponse {
    fn default() -> &'a PriceResponse {
        <PriceResponse as ::protobuf::Message>::default_instance()
    }
}

impl PriceResponse {
    pub fn new() -> PriceResponse {
        ::std::default::Default::default()
    }

    // int64 timestamp = 1;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    // string currency = 2;


    pub fn get_currency(&self) -> &str {
        &self.currency
    }
    pub fn clear_currency(&mut self) {
        self.currency.clear();
    }

    // Param is passed by value, moved
    pub fn set_currency(&mut self, v: ::std::string::String) {
        self.currency = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_currency(&mut self) -> &mut ::std::string::String {
        &mut self.currency
    }

    // Take field
    pub fn take_currency(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.currency, ::std::string::String::new())
    }

    // double price = 3;


    pub fn get_price(&self) -> f64 {
        self.price
    }
    pub fn clear_price(&mut self) {
        self.price = 0.;
    }

    // Param is passed by value, moved
    pub fn set_price(&mut self, v: f64) {
        self.price = v;
    }
}

impl ::protobuf::Message for PriceResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.currency)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.price = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.currency.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.currency);
        }
        if self.price != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_int64(1, self.timestamp)?;
        }
        if !self.currency.is_empty() {
            os.write_string(2, &self.currency)?;
        }
        if self.price != 0. {
            os.write_double(3, self.price)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PriceResponse {
        PriceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &PriceResponse| { &m.timestamp },
                |m: &mut PriceResponse| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "currency",
                |m: &PriceResponse| { &m.currency },
                |m: &mut PriceResponse| { &mut m.currency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "price",
                |m: &PriceResponse| { &m.price },
                |m: &mut PriceResponse| { &mut m.price },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PriceResponse>(
                "PriceResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PriceResponse {
        static instance: ::protobuf::rt::LazyV2<PriceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PriceResponse::new)
    }
}

impl ::protobuf::Clear for PriceResponse {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.currency.clear();
        self.price = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PriceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PriceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rservice.proto\x12\x15cash.z.wallet.sdk.rpc\x1a\x15compact_formats.pr\
    oto\";\n\x07BlockID\x12\x18\n\x06height\x18\x01\x20\x01(\x04R\x06heightB\
    \0\x12\x14\n\x04hash\x18\x02\x20\x01(\x0cR\x04hashB\0:\0\"z\n\nBlockRang\
    e\x126\n\x05start\x18\x01\x20\x01(\x0b2\x1e.cash.z.wallet.sdk.rpc.BlockI\
    DR\x05startB\0\x122\n\x03end\x18\x02\x20\x01(\x0b2\x1e.cash.z.wallet.sdk\
    .rpc.BlockIDR\x03endB\0:\0\"r\n\x08TxFilter\x126\n\x05block\x18\x01\x20\
    \x01(\x0b2\x1e.cash.z.wallet.sdk.rpc.BlockIDR\x05blockB\0\x12\x16\n\x05i\
    ndex\x18\x02\x20\x01(\x04R\x05indexB\0\x12\x14\n\x04hash\x18\x03\x20\x01\
    (\x0cR\x04hashB\0:\0\"B\n\x0eRawTransaction\x12\x14\n\x04data\x18\x01\
    \x20\x01(\x0cR\x04dataB\0\x12\x18\n\x06height\x18\x02\x20\x01(\x04R\x06h\
    eightB\0:\0\"V\n\x0cSendResponse\x12\x1e\n\terrorCode\x18\x01\x20\x01(\
    \x05R\terrorCodeB\0\x12$\n\x0cerrorMessage\x18\x02\x20\x01(\tR\x0cerrorM\
    essageB\0:\0\"\r\n\tChainSpec:\0\"\t\n\x05Empty:\0\"\x92\x04\n\nLightdIn\
    fo\x12\x1a\n\x07version\x18\x01\x20\x01(\tR\x07versionB\0\x12\x18\n\x06v\
    endor\x18\x02\x20\x01(\tR\x06vendorB\0\x12$\n\x0ctaddrSupport\x18\x03\
    \x20\x01(\x08R\x0ctaddrSupportB\0\x12\x1e\n\tchainName\x18\x04\x20\x01(\
    \tR\tchainNameB\0\x12:\n\x17saplingActivationHeight\x18\x05\x20\x01(\x04\
    R\x17saplingActivationHeightB\0\x12.\n\x11consensusBranchId\x18\x06\x20\
    \x01(\tR\x11consensusBranchIdB\0\x12\"\n\x0bblockHeight\x18\x07\x20\x01(\
    \x04R\x0bblockHeightB\0\x12\x1e\n\tgitCommit\x18\x08\x20\x01(\tR\tgitCom\
    mitB\0\x12\x18\n\x06branch\x18\t\x20\x01(\tR\x06branchB\0\x12\x1e\n\tbui\
    ldDate\x18\n\x20\x01(\tR\tbuildDateB\0\x12\x1e\n\tbuildUser\x18\x0b\x20\
    \x01(\tR\tbuildUserB\0\x12*\n\x0festimatedHeight\x18\x0c\x20\x01(\x04R\
    \x0festimatedHeightB\0\x12\"\n\x0bzcashdBuild\x18\r\x20\x01(\tR\x0bzcash\
    dBuildB\0\x12,\n\x10zcashdSubversion\x18\x0e\x20\x01(\tR\x10zcashdSubver\
    sionB\0:\0\"x\n\x1dTransparentAddressBlockFilter\x12\x1a\n\x07address\
    \x18\x01\x20\x01(\tR\x07addressB\0\x129\n\x05range\x18\x02\x20\x01(\x0b2\
    !.cash.z.wallet.sdk.rpc.BlockRangeR\x05rangeB\0:\0\".\n\x08Duration\x12\
    \x20\n\nintervalUs\x18\x01\x20\x01(\x03R\nintervalUsB\0:\0\">\n\x0cPingR\
    esponse\x12\x16\n\x05entry\x18\x01\x20\x01(\x03R\x05entryB\0\x12\x14\n\
    \x04exit\x18\x02\x20\x01(\x03R\x04exitB\0:\0\"'\n\x07Address\x12\x1a\n\
    \x07address\x18\x01\x20\x01(\tR\x07addressB\0:\0\"/\n\x0bAddressList\x12\
    \x1e\n\taddresses\x18\x01\x20\x03(\tR\taddressesB\0:\0\")\n\x07Balance\
    \x12\x1c\n\x08valueZat\x18\x01\x20\x01(\x03R\x08valueZatB\0:\0\"!\n\x07E\
    xclude\x12\x14\n\x04txid\x18\x01\x20\x03(\x0cR\x04txidB\0:\0\"\x85\x01\n\
    \tTreeState\x12\x1a\n\x07network\x18\x01\x20\x01(\tR\x07networkB\0\x12\
    \x18\n\x06height\x18\x02\x20\x01(\x04R\x06heightB\0\x12\x14\n\x04hash\
    \x18\x03\x20\x01(\tR\x04hashB\0\x12\x14\n\x04time\x18\x04\x20\x01(\rR\
    \x04timeB\0\x12\x14\n\x04tree\x18\x05\x20\x01(\tR\x04treeB\0:\0\"|\n\x12\
    GetAddressUtxosArg\x12\x1e\n\taddresses\x18\x01\x20\x03(\tR\taddressesB\
    \0\x12\"\n\x0bstartHeight\x18\x02\x20\x01(\x04R\x0bstartHeightB\0\x12\
    \x20\n\nmaxEntries\x18\x03\x20\x01(\rR\nmaxEntriesB\0:\0\"\xb4\x01\n\x14\
    GetAddressUtxosReply\x12\x1a\n\x07address\x18\x06\x20\x01(\tR\x07address\
    B\0\x12\x14\n\x04txid\x18\x01\x20\x01(\x0cR\x04txidB\0\x12\x16\n\x05inde\
    x\x18\x02\x20\x01(\x05R\x05indexB\0\x12\x18\n\x06script\x18\x03\x20\x01(\
    \x0cR\x06scriptB\0\x12\x1c\n\x08valueZat\x18\x04\x20\x01(\x03R\x08valueZ\
    atB\0\x12\x18\n\x06height\x18\x05\x20\x01(\x04R\x06heightB\0:\0\"o\n\x18\
    GetAddressUtxosReplyList\x12Q\n\x0caddressUtxos\x18\x01\x20\x03(\x0b2+.c\
    ash.z.wallet.sdk.rpc.GetAddressUtxosReplyR\x0caddressUtxosB\0:\0\"N\n\
    \x0cPriceRequest\x12\x1e\n\ttimestamp\x18\x01\x20\x01(\x04R\ttimestampB\
    \0\x12\x1c\n\x08currency\x18\x02\x20\x01(\tR\x08currencyB\0:\0\"g\n\rPri\
    ceResponse\x12\x1e\n\ttimestamp\x18\x01\x20\x01(\x03R\ttimestampB\0\x12\
    \x1c\n\x08currency\x18\x02\x20\x01(\tR\x08currencyB\0\x12\x16\n\x05price\
    \x18\x03\x20\x01(\x01R\x05priceB\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
